---
title: "serotype proportion plot"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
library(tidyverse)

# Read data
nepal <- read.csv("nepal.csv")
nepal_gps <- read.csv("nepal_gps.csv")

# Define serotype groups
pcv10_serotypes <- c('1', '4', '5', '6B', '7F', '9V', '14', '18C', '19F', '23F')
pcv13_serotypes <- c('3', '6A', '19A')
pcv15_serotypes <- c('22F', '33F')
pcv20_serotypes <- c('8', '10A', '11A', '12F', '15B')

serotypes_all <- unique(nepal_gps$In_silico_serotype)
non_vaccine_serotypes <- setdiff(serotypes_all, pcv10_serotypes)
non_vaccine_serotypes <- non_vaccine_serotypes[!non_vaccine_serotypes %in%
                                                 c("ALTERNATIVE_ALIB_NT", "COVERAGE TOO LOW", "SWISS_NT")]

# Shorten and classify
nepal_shortened <- nepal_gps[, c("Year", "Clinical_manifestation", "In_silico_serotype")]

nepal_shortened$Serotype_group <- ifelse(
  nepal_shortened$In_silico_serotype %in% pcv10_serotypes, "PCV10",
  ifelse(nepal_shortened$In_silico_serotype %in% pcv13_serotypes, "PCV13",
  ifelse(nepal_shortened$In_silico_serotype %in% pcv15_serotypes, "PCV15",
  ifelse(nepal_shortened$In_silico_serotype %in% pcv20_serotypes, "PCV20", "Other"))))

# Assign Disease vs Carriage
nepal_shortened <- nepal_shortened %>%
  filter(Year >= 2009) %>%
  mutate(Disease_Status = ifelse(Clinical_manifestation == "CARRIAGE", "Carriage", "Disease"))

# Count data
nepal_serotype_counts <- nepal_shortened %>%
  group_by(Year, Disease_Status, Serotype_group) %>%
  summarise(count = n(), .groups = "drop")

# Proportion data (within each year and disease status)
nepal_serotype_props <- nepal_serotype_counts %>%
  group_by(Year, Disease_Status) %>%
  mutate(prop = count / sum(count)) %>%
  ungroup()

# Define custom color palette
custom_colors <- c(
  "PCV10" = "#00356B",   # Yale Blue
  "PCV13" = "#6A0DAD",   # Purple
  "PCV15" = "#008080",   # Teal
  "PCV20" = "#E69F00",   # Gold
  "Other" = "#999999"    # Grey fallback
)

# === Original count plot ===
ggplot(nepal_serotype_counts, aes(x = Year, y = count, color = Serotype_group)) +
  geom_line() +
  geom_point() +
  facet_grid(Disease_Status ~ .) +
  scale_color_manual(values = custom_colors) +
  labs(
    title = "Pneumococcal Disease Prevalence by Serotype Group Over Time",
    y = "Case Count",
    x = "Year",
    color = "Serotype Group"
  ) +
  theme_bw() +
  theme(plot.title = element_text(face = "bold", size = 14))

# === New proportion plot ===
ggplot(nepal_serotype_props, aes(x = Year, y = prop, color = Serotype_group)) +
  geom_line() +
  geom_point() +
  facet_grid(Disease_Status ~ .) +
  scale_color_manual(values = custom_colors) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(
    title = "Proportion of Pneumococcal Serotype Groups by Year",
    y = "Proportion of Cases",
    x = "Year",
    color = "Serotype Group"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    strip.text = element_text(size = 12),
    axis.title = element_text(size = 11)
  )

```
